name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vessel_guard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xvfb  # For headless testing
    
    - name: Run linting
      run: |
        pip install flake8 black isort mypy
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app/
        isort --check-only app/
        mypy app/ --ignore-missing-imports
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vessel_guard_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/test_models.py tests/test_services.py tests/test_calculations.py -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run API tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vessel_guard_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/test_api.py tests/test_auth.py -v --tb=short
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vessel_guard_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/test_integration.py -v --tb=short
    
    - name: Run database migration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vessel_guard_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        alembic upgrade head
        alembic downgrade base
        alembic upgrade head
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend/coverage.xml
        flags: backend

  # Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vessel_guard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil  # For performance monitoring
    
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vessel_guard_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/test_performance.py -v -m performance --tb=short
    
    - name: Generate performance report
      run: |
        echo "Performance test completed. Results should be analyzed for regressions."

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './apps/frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_APP_URL: http://localhost:3000
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_APP_URL: http://localhost:3000

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python for security scanning
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security linter
      run: |
        bandit -r apps/backend/app/ -f json -o bandit-report.json || true
    
    - name: Run Safety check for dependencies
      working-directory: ./apps/backend
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep security analysis
      run: |
        semgrep --config auto --json --output semgrep-report.json apps/ || true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload security reports as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          trivy-results.sarif

  # Build and Push Docker Images
  build-and-push:
    needs: [backend-test, frontend-test, security-scan, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/backend
          ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/frontend
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure AWS credentials (if using AWS)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
    
    - name: Deploy to staging with Docker Compose
      run: |
        echo "Deploying to staging environment..."
        # Create deployment directory
        mkdir -p staging-deploy
        
        # Copy deployment files
        cp docker-compose.yml staging-deploy/
        cp -r infra/ staging-deploy/ || true
        
        # Set environment variables for staging
        cat > staging-deploy/.env << EOF
        ENVIRONMENT=staging
        DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
        SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
        REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
        CORS_ORIGINS=${{ secrets.STAGING_CORS_ORIGINS }}
        ALLOWED_HOSTS=${{ secrets.STAGING_ALLOWED_HOSTS }}
        EOF
        
        # Deploy using docker-compose (for simple staging)
        cd staging-deploy
        echo "Pulling latest images..."
        docker-compose pull
        echo "Starting services..."
        docker-compose up -d
        
        # Health check
        echo "Waiting for services to be ready..."
        sleep 30
        curl -f http://staging.vessel-guard.com/api/v1/health || exit 1
        echo "Staging deployment successful!"
    
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Basic connectivity and health checks
        curl -f http://staging.vessel-guard.com/api/v1/health
        curl -f http://staging.vessel-guard.com/api/v1/status
        echo "Smoke tests passed!"
    
    - name: Notify deployment status
      if: ${{ always() && secrets.SLACK_WEBHOOK != '' }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Staging deployment ${{ job.status }}: ${{ github.sha }}\"}" \
          ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure cloud credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
    
    - name: Blue-Green Production Deployment
      run: |
        echo "Starting blue-green production deployment..."
        
        # Create deployment directory
        mkdir -p production-deploy
        cp docker-compose.yml production-deploy/
        cp -r infra/ production-deploy/ || true
        
        # Set production environment variables
        cat > production-deploy/.env << EOF
        ENVIRONMENT=production
        DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
        SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}
        REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}
        CORS_ORIGINS=${{ secrets.PRODUCTION_CORS_ORIGINS }}
        ALLOWED_HOSTS=${{ secrets.PRODUCTION_ALLOWED_HOSTS }}
        EOF
        
        cd production-deploy
        
        # Deploy new version (green)
        echo "Deploying green environment..."
        docker-compose -f docker-compose.yml -f docker-compose.green.yml up -d
        
        # Health check on green environment
        echo "Health checking green environment..."
        sleep 60
        for i in {1..10}; do
          if curl -f http://green.vessel-guard.com/api/v1/health; then
            echo "Green environment is healthy"
            break
          fi
          echo "Attempt $i failed, retrying..."
          sleep 10
        done
        
        # Switch traffic to green (this would typically involve load balancer configuration)
        echo "Switching traffic to green environment..."
        # kubectl patch service vessel-guard-service -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Final health check
        curl -f http://vessel-guard.com/api/v1/health
        echo "Production deployment successful!"
    
    - name: Database migration
      run: |
        echo "Running database migrations..."
        # This should be done carefully in production
        docker exec vessel-guard-backend alembic upgrade head
    
    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        curl -f http://vessel-guard.com/api/v1/health
        curl -f http://vessel-guard.com/api/v1/status
        # Additional verification tests
        curl -f http://vessel-guard.com/api/v1/monitoring/metrics
        echo "Post-deployment verification passed!"
    
    - name: Clean up old deployment
      run: |
        echo "Cleaning up old (blue) deployment..."
        docker-compose -f docker-compose.yml -f docker-compose.blue.yml down
    
    - name: Notify deployment status
      if: ${{ always() && secrets.SLACK_WEBHOOK != '' }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Production deployment ${{ job.status }}: ${{ github.sha }}\"}" \
          ${{ secrets.SLACK_WEBHOOK }}
  # Rollback capability
  rollback-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Rollback to previous version
      run: |
        echo "Rolling back to previous production version..."
        
        # Switch back to blue environment
        echo "Switching traffic back to blue environment..."
        # kubectl patch service vessel-guard-service -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # Health check
        curl -f http://vessel-guard.com/api/v1/health
        echo "Rollback completed successfully!"
    
    - name: Notify rollback
      if: ${{ always() && secrets.SLACK_WEBHOOK != '' }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Production rollback ${{ job.status }}: Reverted to previous version\"}" \
          ${{ secrets.SLACK_WEBHOOK }}

