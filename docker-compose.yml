version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vessel-guard-postgres
    environment:
      POSTGRES_DB: vessel_guard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vessel-guard-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vessel-guard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vessel-guard-network

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: vessel-guard-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vessel_guard
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production
      - CORS_ORIGINS=["http://localhost:3000", "http://frontend:3000"]
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/backend:/app
    networks:
      - vessel-guard-network
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: vessel-guard-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - vessel-guard-network

volumes:
  postgres_data:
  redis_data:

networks:
  vessel-guard-network:
    driver: bridge
